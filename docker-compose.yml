services:
  # --------------------------------------------------------------------------
  # PostgreSQL Database
  # --------------------------------------------------------------------------
  db:
    image: postgres:15-alpine
    container_name: django_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
    ports:
      - "5432:5432"

  # --------------------------------------------------------------------------
  # Django Backend
  # --------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: django_backend
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    ports:
      - "8000:8000"

  # --------------------------------------------------------------------------
  # React Frontend
  # --------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: react_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8000
      - PORT=3000
      - HOST=0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - frontend_network

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge

volumes:
  postgres_data:    # Persistent database data
    name: django_postgres_data
  postgres_backups: # For database backups
    name: django_postgres_backups
  backend_static:   # Django static files
    name: django_static_files
  backend_media:    # Django media files
    name: django_media_files 